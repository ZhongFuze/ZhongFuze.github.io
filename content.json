{"meta":{"title":"F泽泽馥泽泽杂记F","subtitle":"Hello World","description":"嘤嘤嘤","author":"ZhongFuze","url":"http://zhongfuze.github.io"},"pages":[],"posts":[{"title":"Paper-Reading","slug":"Paper-Reading","date":"2018-08-09T02:46:45.000Z","updated":"2018-08-10T07:10:29.406Z","comments":true,"path":"2018/08/09/Paper-Reading/","link":"","permalink":"http://zhongfuze.github.io/2018/08/09/Paper-Reading/","excerpt":"","text":"Paper Reading —— Attention-based Transactional Context Embedding for Next-Item Recommendation基于注意力的事务上下文嵌入下一项推荐Abstract在电商交易环境中向user推荐下一个item,这样的应用非常实用但是具有挑战性。Transactional context 是指在交易记录中的observed items。大多数现有的推荐系统，主要是考虑recently occurring items 而不是 all the ones observed in the current context，这些算法通常假设交易中的items之间存在严格的顺序，但是这并不总是起作用，a long transaction(一个比较长的交易范围)通常包含许多对下一个选择的item没有关联或者说是没有用的item信息，这往往会overwhelm一些真正相关的item的影响。123456789101112131415举个栗子~让我们举一个例子来说明上述问题。用户首先将三个项目&#123;milk，apple，orange&#125;放入购物车中，然后将&#123;bread&#125;添加到同一购物车中。随后，交易被确定为&#123;milk，apple，orange，bread&#125;。如果我们将前三个项目作为上下文而最后一个项目作为推荐的目标，现有方法可能会建议&#123;vegetables&#125;，如&#123;green salad&#125;，因为最近的上下文项目（orange和apple）。但是，目标物品面包的选择可能取决于第一个项目（milk）。在这种情况下，推荐系统应该更多地关注milk而不是orange和apple，因为milk可能与下一个选择的bread更相关。此示例显示了下一项建议的重要性，这可能会被交易中的无关项误导。此外，真实世界的交易数据通常仅指示那些项目与项目之间的订单（例如，项目时间戳）共同出现在交易中。因此，推荐具有严格订单的交易项目可能是不可能和现实的。作者提出一个推荐算法，这个算法不仅考虑当前交易中所有的observed items，而且还要用不同的relevance(相关性)对它们进行加权，以建立一个attentive context(注意力上下文)，以高概率输出正确的下一个项目。模型——基于注意的事务嵌入模型（ATEM），用于上下文嵌入，以在不假定顺序的情况下对每个观察到的项目进行加权。对交易数据集的实证研究证明，ATEM在准确性和新颖性方面都显着优于最先进的方法。Main Algorithmx=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\\(x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}\\)Motivation推荐系统（RS）发挥着重要作用，特别是在商业领域。然而，大多数现有的RS理论面临各种问题，例如倾向于重复与用户可能已经选择的类似的项目。在现实数据场景中，用户可能更喜欢新颖且与手头上现有的不同的项目。为了解决这个问题，需要在交易上下文中进行新的推荐，即在交易中已经选择的内容中挖掘。一方面，分析基于RS交易序列，通过分析交易间耦合关系，产生更合理和可靠的新交易建议，例如下一个购物车(basket)和下一项目(item)建议。这些与基于user profile和item profile构建的典型RS方法完全不同。然而，当一个items集合被放入一个transaction时，仍然不清楚应该下一个项目应该推荐什么。这产生了通过分析事务内依赖性来推荐事务上下文下的下一项的需要。(transactional context:用于推荐下一个项目的上下文是指对应的项目相关交易，例如，由多个所选项目组成的购物篮记录)Related了解transaction context中items之间的相关性和转换非常具有挑战性。在TBRS中，一个普遍的挑战是建立一个注意力(attention)的背景，以高概率输出真正的下一个选择。一些现有方法旨在通过将transaction as the context来生成推荐。然而，大多数现有TBRS利用具有排序假设的部分上下文。顺序模式挖掘（2012）用于使用具有严格顺序假设的items之间的关联来预测下一项。但是，上下文中的项可能是任意的，这可能无法匹配任何已挖掘的模式。马尔可夫链（MC）（2012）是建模顺序数据的另一种方法。然而，MC只捕获从一个项目到下一个项目的转换，而不是从上下文序列中捕获，即，它只能捕获第一次转换。最近，基于矩阵隐式因子分解（MF）的方法（2016）将转移概率的矩阵从然而，由于现实世界中的幂律分布数据，MF很容易受到稀疏性问题的困扰（2016）。受Deep Learning的巨大成功的启发（2015），应用深度递归神经网络（RNN）来模拟顺序数据的事务，但由复杂结构引起的高计算成本阻止了其应用于大数据。此外，MC，MF和RNN最初是为具有严格自然顺序的时间序列数据而设计的，因此它们不具有无序的交易。(例如，或面包是否首先放入购物车中没有区别。另外，现有方法不能有效地加权上下文中的项目，即更多地关注那些相关项目。这种注意区分非常重要，特别是对于长期交易而言，这些交易往往包含许多与下一个选择无关的项目。)最近，受心理认知方案的启发，注意机制在上下文学习相关方面显示出惊人的潜力。 通过搜索图像中与答案相关的区域，呈现用于图像问题回答的堆叠注意网络（SAN）。 另一个新模型在人类关注的指导下学习句子表征（Shaonan，Jiajun和Chengqing 2017）。 鉴于CV和NLP中的上下文学习注意机制的巨大成功，我们结合了一些想法并提出ATEM来模拟下一个项目推荐的注意上下文。Contribution本文通过提出一种基于注意力的交易嵌入模型（ATEM）来解决需求。 ATEM通过识别与下一个选择具有高度相关性的上下文项，在交易中的所有观察项目的嵌入（Embedding）上构建了一个关注的上下文（attention context）。构建了一个浅宽的广泛网络（wide-in-wide-out network）（Goth 2016），以减少时间和空间成本。具体而言，作者将注意机制（Shaonan，Jiajun和Chengqing 2017）纳入浅层网络，以在没有严格排序假设的情况下在事务中构建所有观察项目（observed items）的注意上下文(attention context)。由于注意机制，所提出的模型能够更多地关注更相关的items，而更少关注不太相关的items。因此，ATEM更有效，更强大，可以预测具有较少约束的事务中的下一个item。这项工作的主要贡献如下：基于注意力的模型学习一种注意力的上下文嵌入，强化了相关项目但忽略了与下一个选择无关的项目。 我们的方法不涉及对事务中项目的严格排序假设。浅宽的宽广网络实现了ATEM，它对于大量项目的学习和预测更有效和高效。实证研究表明ATEM在准确性和新颖性方面明显优于两个真实数据集上的最新TBRS;通过比较有无注意机制的方法，注意机制对TBRS产生显着差异。Summary","categories":[{"name":"recommendation","slug":"recommendation","permalink":"http://zhongfuze.github.io/categories/recommendation/"}],"tags":[{"name":"embedding,recommendation","slug":"embedding-recommendation","permalink":"http://zhongfuze.github.io/tags/embedding-recommendation/"}]},{"title":"我的第一篇文章","slug":"我的第一篇文章","date":"2018-08-08T12:38:10.000Z","updated":"2018-08-09T06:16:41.799Z","comments":true,"path":"2018/08/08/我的第一篇文章/","link":"","permalink":"http://zhongfuze.github.io/2018/08/08/我的第一篇文章/","excerpt":"","text":"hexo 搭建过程node.js下载地址：http://nodejs.cn/download/git环境下载地址：https://gitforwindows.org/githubhttps://github.com创建文件夹我的文件夹建立在D盘打开Git Bash，输入：cd d:cd blog接着，输入npm install hexo如果出现说npm没有安装的话，请移步编辑用户环境变量，将npm加入环境变量中，重启git bash即可。再次进入文件夹执行安装命令，如果出现npm WARN deprecated titlecase@1.1.2: no longer maintained可以不用理会如果目录下出现文件夹就说明初始步骤基本成功了。hexo命令1234hexo init --初始化hexo环境,这时会在目录下自动生成hexo的文件npm install --安装npm依赖包hexo generate --生成静态页面hexo server --生成本地服务如果出现hexo command not found（笔者安装过程好坎坷啊！！！）解决方法：找到刚刚新建的blog文件夹，xxx/blog/hexo/bin将这个路径添加到环境变量(xxx为自定义的路径,笔者的就是D:/blog/hexo/bin)在blog路径下新建一个文件夹hexo执行hexo init需要在一个空的文件夹下执行，执行过程和结果如下图打开http://localhost:4000/看看是否启动成功，启动后会出现这个页面。发布local到internet使用github创建远程仓库，新建一个跟自己账号名字一样的空仓库接着打开本地的hexo文件夹中的_config.yml文件打开文件编辑文件末，将deploy修改如下：(使用自己repo地址)编辑完成后保存。下面的步骤如果不想新建文章的话，到这就结束了保存后再Git Bash 中执行npm install hexo-deployer-git --save最后执行hexo deploy这一步需要保证github上拥有本机的公钥！！！备注：添加公钥方法本地创建SSH Keysssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;邮箱即为 github 注册邮箱,之后会要求确认路径和输入密码，一路回车。成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。cat ~/.ssh/id_rsa.pub复制内容至github-Setting-GPG and SSH Keys-Add新建文章在Git Bash输入hexo new World注：World 是标题在xxx/blog/hexo/source/_post文件夹里会有World.md内容如下：在之后使用md格式编辑正文并保存。hexo 部署12//生成静态文件hexo generate12//安装 hexo-deployer-gitnpm install hexo-deployer-git --save12//部署到githubhexo deploy打开http://zhongfuze.github.io完毕","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-08-08T09:11:56.371Z","updated":"2018-08-08T09:11:56.373Z","comments":true,"path":"2018/08/08/hello-world/","link":"","permalink":"http://zhongfuze.github.io/2018/08/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new \"My New Post\"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment","categories":[],"tags":[]}]}